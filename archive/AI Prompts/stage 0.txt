



Can you confirm that skipping and stitching process creates the modified geometry segments in polygon dataset. I mean if we skip station be where stations are a-b-c in the raw data set we have two segments a-b and b-c. After skipping  b we should end up having a segment a-c in the modified polygon dataset with stitched a-b and b-c segments




Bu seferki biraz saçma olabilir. Buna programlamada ne deniyor bilmiyorum. Mantıksız gelebilir. Biraz karmaşık anlamadığın ksıımları sorabilirsin. Şimdi biz Stage 0 script'in en başında raw data olan "D:/PhD/codingPractices/SYTN3/data/raw/linie_mit_polygon.csv"'ı okuyacağız ve bunu LINE_ID_LIST = [850, 751, 710, 650, 540, 450, 250, 100, 501, 500,
                722, 723, 720, 890, 900, 150, 200, 210, 410, 250, 400, 452]'a göre filtreleyeceğiz. Elimizde sadece bu line idlere ait satırları içeren bir df kalacak bütün kolonları aynen alacağız (filtered_df diyelim).AYrıca en başta boş bir skipped stationların bilgilerini tutan bir değişkenimiz olacak buna şimdilik skipped_stations diyelim. Lİstedeki her bir id'ye göre sırayla şunu yapacağız. Birinci sayı 850 olduğu için örnek olarak ondan başlıyorum. filtered_df'de line id'si olan 850 olan satırları "KM START" kolonuna göre küçükten büyüğe göre sıralaycağız. bu sıralamadan sonraki, birinci satırdaki START_OP (bu bir istasyon kısaltması), ile son satırdaki END_OP (istasyon kısaltması) bu hattın başlangıç ve bitiş istasyonlarını veriyorlar. line 850 için muhtemelen bunlar sırasıyla "SG" ve "WNO". Sırayla bütün satırlardaki geometrik segmentler için daha önceden belirlediğimiz testleri yaparak yeterli geometrik mesafe olup olmadığına, istasyonu atlayıp atlayamayacağımıza bakacağız. Segmentler  ilk satırdan son satıra göre şöyle devam ediyor SG-SGW, SGW-SGBR, SGBR-SGWI, SGWI-GSS ... SCAL-WNO. Önce her bir line id için secure_segments diye boş bir liste oluşturuyoruz. Yeni bir line_id'yi incelediğimizde sıfırlanacak. Her bir geometrik polygon'u incelerken önce şuna bakacağız bu segmentin başlangıç veya bitiş noktasındaki istasyon daha önce skipped_stations listesine eklenmiş miydi? İncelemeye daha yeni başladığımız için henüz bu liste boş. Sorun yok. İleride bu listede olan bir istasyona denk gelince ne olacağını da anlatacağım. Her bir segmenti sırayla incelerken önce secure_segments listesinde bu segment var mı diye bakıyoruz, eğer o listede varsa bu segmenti incelememize gerek yok çünkü zaten daha önce incelenmiş ve secure olduğu onaylanmış demek. Diyelim ki ilk iki segment bu geometrik mesafe şartını karşıladı ve skipped istasyon yoktu bu durumda bunları secure_segments listesine ekliyoruz tek tek.  ama üçüncü karşılamadı (SGBR-SGWI). Bu durumda SGWI istasyonu skip edilmeyecek istasyonlar listesinde var mı diye bakacağız (NEVER_SKIP_LIST = ['LZ', 'BS', 'BN', 'ZUE', 'LS', 'GE']) BU listede yoksa bunu skip edilecek istasyonlar listesine ekleyeceğiz (skipped_stations). Bunu başka bir veri yapısıyla da yapabiliriz böylece skip edilecek istasyonu, line id'yi falan da bu veri yapısında tutabiliriz. Öyle bir şey mümkünse tabii. Neyse. SGWI ile ilgili modifikasyonları hemen yapacağız. Şöyle ki; SGWI içeren iki tane segmenti hemen stitch yapacağız (SGWI son durak olmadığı için bu şekilde yapıyoruz biliyoruz ki bu son durak değil ve bir sonraki satırda SGWI'den sonra bu hat nereye ulaşıyor onu alıyoruz, WNO son durak bunu biliyoruz). Yani artık filtered_df SGBR-SGWI, SGWI-GSS diye iki segment içermeyecek, bu iki poligonun stitvchlenmiş hali olan SBGR-GSS diye bir segment olacak bu iki segment yerine. Yani 2 satır sildik, yerine 1 tane satır koyduk, bu satırda "KM START" değeri olarak sildiğimiz ilk segment olan SGBR-SGWI segmentinin"KM START" değeri,  "KM END" olarak ise ikinci segment olan SGWI-GSS segmentinin KM END değeri olacak. Bu hattın son istasyonu WNO'ya henüz ulaşamadığımız için en baştan tekrar 850'yi taramaya en baştan başlıyoruz. Şimdi elimizdeki segmentler şöyle SG-SGW, SGW-SGBR, SGBR-GSS, GSS-BUDZ, ... SCAL-WNO. En baştan itibaren tekrar başladık. SG-SGW'i incelememize gerek var mı? YOK çünkü bu segment zaten secure_segments listesine eklenmişti. bir sonrakine bakıyoruz, SGW-SGBR de secure_segments listesinde vardı yine incelemeden geçtik, SGBR-GSS'ye geldik. BU segment secure_segments listesinde yok çünkü az önce yarattık ve ilk defa incelenecek. Diyelim ki bu segment de geometrik mesafe şartını sağlamadı (bu stitched polygon da hala çok kısa), o zaman GSS asla skiplenmeyecekler listesinde var mı diye bakacağız yine. YOK. O zaman GSS'i skip listesine ekleyeceğiz. GSS son durak değil bunu biliyoruz o halde bir sonraki satırda GSS kime bağlanıyormuş onu alıp stitch yapıyoruz SGBR-GSS, GSS-BUDZ segmentlerinin olduğu satırlar gidiyor aynı şekilde SBGR-BUDZ segmentini stitch ile biz yaratıp ekliyoruz. Yine baştan başlıyoruz. SBGR-BUDZ'dan önceki satırlar zaten secure_segments listesinde var diye onları atladık ve SBGR-BUDZ'ı inceledik eğer geometrik şartı sağlıyorsa aynen devam. SON istasyona yakın istasyonlarda (WNO'ya yakın) durum biraz farklılaşıyor. Son birkaç satırdaki segmentler şu şekilde RAET-WHE, WHE-WGR, WGR-SCAL, SCAL-WNO. Diyelim ki WHE-WGR'i inceledik ve secure_segments listesine ekledik. WGR-SCAL'i inceledik ve polygon geometrik şartı sağlamadı yukarıdaki adımları tekrarladık ve WGR-SCAL, SCAL-WNO yerine tek bir stitchlenmiş segment olan WGR-WNO elde ettik. Bunu inceledik geometrik şartı sağlarsa sorun yok inceleme burada biter bir sonraki line id olan 751 için aynı şeyleri yaparız. Ama eğer geometrik şartı sağlamazsa Son istasyon olan WNO'nun asla skiplenmeyecekler listesinde olup olmadığına bakarız (default listemiz NEVER_SKIP_LIST = ['LZ', 'BS', 'BN', 'ZUE', 'LS', 'GE'] ve WNO bu listede yok ama şimdiki örnek için sanki WNO da bu listedeymiş gibi yapıp listenin NEVER_SKIP_LIST = ['LZ', 'BS', 'BN', 'ZUE', 'LS', 'GE', 'WNO'] şeklinde olduğunu düşünelim). Eğer WNO bu listedeyse eğer onu silemeyiz o istasyon bize lazım. İşte bu Noktada bir önceki istasyona dönmemiz lazım. Burada bir geri gidiş algoritması lazım. WGR-WNO segmenti için WGR'yi silmeyi denememiz lazım. Eğer WGR'yi silebiliyorsak NEVER_SKIP_LIST 'te değilse onu silip bu sefer geriye doğüru stitchleme yapmamız lazım. Son iki satırdaki segmentler son durumda şöyleydi: WHE-WGR, WGR-WNO. WGR'yi silebildiğimiz için WHE-WNO segmentini stitchliyeceğiz ve WHE-WGR, WGR-WNO segmentleri silinip WHE-WNO segmenti gelecek. eğer bu segment de geometik poligon şartını sağlamazsa bir adım daha geri gitmemiz lazım vs. BU fikir nasıl? 






I want to say somthing about this part :"def safe_stitch(seg1, seg2):
    """Merge two LineString geometries end-to-end"""
    c1 = json.loads(seg1["Geo shape"])["coordinates"]
    c2 = json.loads(seg2["Geo shape"])["coordinates"]
    return c1 + c2" I guess this is where we combine polygon geometries after removing a station. Let's say we have A-B-C stations and segments for them are A-B and B-C. If we remove B we will have A-C segment c1 + c2 . But the problem is: Last coordinate of segment A-B and first coordinate of segment B-C supposed to represent station B. So these coordinates should be identical or at least very close. So in this case we can not use c1 + c2 directly here. We need to remove the last coordinate of the c1 and first coordinate of the c2 from polygon.  Then we can add them up. Can you provide me the full corrected script code for this and also for progressive terminal printing here. 




we need to solve these "The duplicates suggest a bug during stitching or segment retention." This is a problem. We can not have same segment multiple times. If the line id and start and end op's are same we should only keep 1 of them.  and also "WNO might be last station in the line (850), so it was protected from skipping due to end-of-line fallback." why is that? Can't we remove the last station of a line if it is not in NEVER SKIP LIST? WNO is not in NEVER SKIP LIST. I guess there might be a way to remove it SO the station before So the Last segment that is labelled as secure becomes the last segment. Let's say stations goes like, A-B-C-D-E-WNO, let's assume B-C labelled as secure but the distance between c-WNO is still too short so even though we stitch C-WNO segment we can not put a valid station layout there, we can skip D-E-WNO and Keep B-C as our last segment and C as our last station on the line (of course i assume in this particular exapmle D-E-WNO are all NOT in our NEVER SKIP LIST). 











I want to modify some things in stage 0. First the calculation for min_needed. We need to define a constant at the beginning called MIN_MAIN_LINE_LENGTH (default value is 400 m). min_needed = 0.5 * p1 + ENTRY_OFFSET_BUFFER * 2 +MIN_MAIN_LINE_LENGTH  0.5 * p2. and also we need to create "D:/PhD/codingPractices/SYTN3/data/interim/helper_files/stitched_station_helper.csv" with following columns: "station,platform_length,station_coordinates,station_type,num_platforms,entry_directions,connected_stations,entry_node_coords" can you do this update and provide me the updated full script codes to run in my local computer?